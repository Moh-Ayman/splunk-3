#!/bin/bash
######################################################################################
#
# Author: Thomas Fischer <mail@se-di.de>, https://github.com/xdajog
# Desc:   Wrapper for ensuring we use the correct user to handle things for splunk>
# Created: 2015-08-13
# License: CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0/)
#
# Usage:
#   execute "splunk" and you can use all arguments like with /opt/splunk/bin/splunk
#   execute one of the sym names to do a quick action
#
# Install (separate cmds):
#   name this script "/usr/bin/splunk"
#   ln -s /usr/bin/splunk /usr/bin/splunkrestart
#   ln -s /usr/bin/splunk /usr/bin/splunkwebrestart
#   ln -s /usr/bin/splunk /usr/bin/splunkdebug
#   ln -s /usr/bin/splunk /usr/bin/splunkstop
#   ln -s /usr/bin/splunk /usr/bin/splunkstart
#
# Install (single cmd):
#   name this script "/usr/bin/splunk" then proceed:
#   ln -s /usr/bin/splunk /usr/bin/splunkrestart;ln -s /usr/bin/splunk /usr/bin/splunkwebrestart;ln -s /usr/bin/splunk /usr/bin/splunkdebug;ln -s /usr/bin/splunk /usr/bin/splunkstop;ln -s /usr/bin/splunk /usr/bin/splunkstart
#
#
# Last changed: 2015-08-13
#
######################################################################################

# user vars:
SPLUSR="splunk"			# the user splunk should run as
SPLDIR="/opt/splunk"		# splunk installation path


# generated vars:
SPLBIN="$SPLDIR/bin/splunk"	# the generated full path to splunk binary
ID=$(id -un) 			# get the effective - not real user name

# ensure we have root perms. we will drop privs when needed later.
if [ "$ID" != "root" ]&&[ "$ID" != "$SPLUSR" ];then
        echo -e "\n\tYou ($ID) need to be user <root> or <$SPLUSR> to execute this command.\n"
        exit 3
fi

# see how we get called:
BIN=${0##*/}
echo -e "\n... execution command was <$BIN>\n... executed as user <$ID>\n"

# and act accordingly:
case $BIN in
	# just a site note: I check for the splunk user and not for root here. Why?
	# well if something goes wrong it will fallback always to use su and therefore
	# the worst could happen would be that su failing because of permission.
	# this way I ensure that even when the user id was not catched correctly that 
	# this will not destroy the splunk> dirs..!
        splunk) # a simple wrapper with all given arguments
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && su -c "$SPLBIN $@" - $SPLUSR; else "$SPLBIN $@";fi
        ;;
        splunkstop) # stop splunk>
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && su -c "$SPLBIN stop" - $SPLUSR; else "$SPLBIN stop";fi
        ;;
        splunkstart) # start splunk>
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && su -c "$SPLBIN start" - $SPLUSR; else "$SPLBIN start" ;fi
        ;;
        splunkrestart) # restart splunk>
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && su -c "$SPLBIN restart" - $SPLUSR; else "$SPLBIN restart";fi
        ;;
        splunkwebrestart) # restart splunk> web
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && su -c "$SPLBIN restartss" - $SPLUSR; else "$SPLBIN restartss";fi
        ;;
        splunkdebug) # use splunk> btool debug
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && su -c "$SPLBIN btool --debug check" - $SPLUSR; else "$SPLBIN btool --debug check";fi
        ;;
esac
