#!/bin/bash
#########################################################################################
#
# Author:	Thomas Fischer <mail@se-di.de>, https://github.com/xdajog
# Created: 	2015-08-13
# License: 	CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0/)
#
# Desc:   
#   Have you ever started splunk> as the wrong user? Oh well if you HAVE you know what I
#   mean. This helper here exists to avoid those forever! 
#     - Never worry about doing splunk> related commands with the correct user!
#     - No need to switch from user <root> to your splunk user 
#   just configure this helper with the installation path and splunk username and after
#   doing the symlinks you are done. 
#
#########################################################################################
#
# Usage & Installation: Checkout README !!
#
#########################################################################################
#
# Last changed: 2015-09-13
#
#########################################################################################

# user vars:
SPLUSR="splunk"			        # the user splunk should run as
SPLDIR="/opt/splunk"		    # splunk installation path
FORCEOLD=                       # If you're using an older version than the supported one you can set
                                # this variable to "y" and no warning message will appear anymore

# SH cluster configs (if you have one):
SHCMEMB=                        # 1 SH cluster member for deploying the config bundle
                                # You can leave this value empty (recommended) to ask for it
SHCPORT=8089                    # Management port of your SH cluster members (normally 8089)


# NO CHANGES BEHIND THIS LINE !
#################################################################################################################################

# system vars (do not change!):
SUBIN=/bin/su                   # full path to su binary
SUPPVER=620                     # The supported and tested splunk> version. It may or may not work with older versions
                                # Do NOT change that variable! If you have an older splunk version running adjust FORCEOLD above!
SPLBIN="$SPLDIR/bin/splunk"	    # the generated full path to splunk binary
ID=$(id -un) 			        # get the effective - not real user name

# ensure we have root perms. we will drop privs when needed later.
if [ "$ID" != "root" ]&&[ "$ID" != "$SPLUSR" ];then
        echo -e "\n\tYou ($ID) need to be user <root> or <$SPLUSR> to execute this command.\n"
        exit 3
fi

# ensure splunk is installed!
[ ! -x "$SPLBIN" ]&& echo -e "\n\t$SPLBIN missing!! Is splunk> installed? ABORTED.\n\n" && exit 2

# see how we get called:
BIN=${0##*/}
echo -e "\n... execution command was <$BIN>\n... executed as user <$ID>\n"

# usage info
F_HELP(){
    echo '
    **************
    * USAGE INFO *
    **************
    
    IMPORTANT HINT:
    If you want help for the REAL splunk command simply execute "splunk help" instead!
    
    Non specific splunk> commands (executable on every server type):
    ****************************************************************************************************************
    $> splunk                       Provides direct access to splunk binary but with the powers of splunkhelper!
                                    (real exec: like "/opt/splunk/bin/splunk" )
                                        
    $> splunkrestart                Restarts splunk
                                    (real exec: "restart")
                                        
    $> splunkwebrestart             Restarts splunk web interface
                                    (real exec: "restartss")
                                        
    $> splunkdebug                   Executes btool debug check
                                    (real exec: "btool --debug check")
                                        
    $> splunkstop                   Stops splunk
                                    (real exec: "stop")
                                        
    $> splunkstart                  Starts splunk
                                    (real exec: "start")
                                        
    $> splunkstatus                 Status of splunk and helper processes
                                    (real exec: "status")

    $> splunkshcapply               Apply/Deploy configuration bundle within a Search Head Cluster
        |splunkshcdeploy            (real exec: "apply shcluster-bundle -target xxxx")
                                    You can execute this on the Deployer or on every other splunk> instance because
                                    it will ask you for a cluster member(!).
                                    If you execute it on a SH cluster member server it will catch the cluster members
                                    for you and their status for easy copy & paste                               

                                        
    Specific commands (executable on specific server types only):
    ****************************************************************************************************************
    $> splunkcmapply                Apply/Deploy configuration bundle within a index cluster
        |splunkcmdeploy             (real exec: "apply cluster-bundle")
                                    --> This will work on a Cluster Master (CM) only (will abort if not on CM)
                                        
    $> splunkclustershow            Shows the current cluster status
                                    (real exec: "show cluster-status")
                                    --> This will work on a Cluster Master (CM) only (will abort if not on CM)
                                        
    $> splunkclustershowbundle      Shows the current status of cluster bundle config
                                    (real exec: "show cluster-bundle-status")
                                    --> This will work on a Cluster Master (CM) only (will abort if not on CM)
                                        
    $> splunkclusterlistpeers       Shows the peers status connected to an index cluster
                                    (real exec: "list cluster-peers")
                                    --> This will work on a Cluster Master (CM) only (will abort if not on CM)

    $> splunkdsreload               Reloads the deploymentservers classes to deploy changes if needed.
                                    (real exec: "reload deploy-server")
                                    --> This will work on a Deployment Server (DS) only (will abort if not on DS)
    
    General commands (not directly splunk> related):
    ****************************************************************************************************************    
    $> splunkexchange               Requires python installed.
                                    Starts a simple python http server in the CURRENT directory. You can specify
                                    a tcp port - if not: default is 8888.
                                    Example: splunkexchange 9999 will start a webserver in the current directory
                                    on port 9999. If your hostname is "foo" you can then download all files of
                                    that directory by pointing to http://foo:9999/
                                    Really helpful when deploying things..
                                    (real exec: "python -m SimpleHTTPServer <PORT>")
    '
}

# check if we may need help first
case $1 in
    -h|--help)
    F_HELP
    exit
    ;;
esac
    
# it may be a good idea to execute the version check for specific commands only so
# it is prepared as a function to do so later
F_VERSION(){
    unset AVERSION SVERSION
    for i in $($SPLBIN version |grep build);do
        a=$(($a+1))
        AVERSION[$a]="$i"
    done
    # the version is the second value of the above created array
    #echo "DEBUG: ${AVERSION[@]}"
    SVERSION=${AVERSION[2]//\./}
    if [ -z "$SVERSION" ];then
        echo -e "\n*******************************************************************"
        echo -e "WARNING: Cannot determine splunk> version...\n\nTHIS IS VERY(!) UNUSUAL.\n\nTherefore I cannot check if this script would work for you.."
        echo -e "*******************************************************************\n"
        read -p "Press ENTER to continue or CTRL+C to abort" DUMMY
    else
        # check if version is supported
        if [ "$SVERSION" -lt "$SUPPVER" ]&&[ -z "$FORCEOLD" ];then
            echo -e "\n*******************************************************************"
            echo -e "WARNING: Your splunk> version ($SVERSION) is older then the\nsupported version ($SUPPVER)...\n\nTherefore I cannot guarantee that this script works for you in all cases..\n\n(Well this is MOSTLY relevant for special commands like splunkshcdeploy etc.\nStart/Stop/Status are working fine in older versions)\n\nYou can set FORCEOLD to avoid this message from appearing"
            echo -e "*******************************************************************\n\n"
            read -p "Do you still want to continue (press ENTER or CTRL+C to abort)?" ANS
            [ ! -z "$ANS" ]&& echo "... exiting with $ANS " && exit
        fi
    fi
}

# this will move later to the special commands where we need this
F_VERSION

# checking if we're running on a CM (when needed) and hard exit if not!
F_CHECKCM(){
    if [ ! "$ID" == "$SPLUSR" ];then
        echo -e "... dropping privileges to user <$SPLUSR> to get cluster-info\n"
        $SUBIN -c "$SPLBIN list master-info" - $SPLUSR > /dev/null
        MERR=$?
        if [ $MERR -ne 0 ];then echo -e "\n\tERROR: This command can be executed on a Cluster Master only!\n" && exit $MERR ;fi
    else
        echo
        "$SPLBIN" list master-info > /dev/null
         MERR=$?
         if [ $MERR -ne 0 ];then echo -e "\n\tERROR: This command can be executed on a Cluster Master only!\n" && exit $MERR ;fi
    fi
}

# checking if we're running on a DS (when needed) and hard exit if not!
F_CHECKDS(){
    # basic check cause there is no splunk related command other then "list deploy-clients" but that
    # has no valid exitcode. Well we could parse the output but if that changes.. and it will tell only
    # that clients had connected but not if we have a config here. So we check if there is at least one
    # stanza defined in the serverclass.conf:
    grep -e "^\[" $SPLDIR/etc/system/local/serverclass.conf > /dev/null
    MERR=$?
    if [ $MERR -ne 0 ];then echo -e "\n\tERROR: This command can be executed on a Deployment Server only!\n\tserverclass.conf has no valid stanza so I believe it is not a active deployment server.\n\tOnce you have configured a serverclass this command will work.\n\n\tABORTED\n\n" && exit $MERR ;fi
}

# and act accordingly:
case $BIN in
	# just a site note: I check for the splunk user and not for root here. Why?
	# well if something goes wrong it will fallback always to use su and therefore
	# the worst could happen would be that su failing because of permission.
	# this way I ensure that even when the user id was not catched correctly that 
	# this will not destroy the splunk> dirs..!
        splunk) # a simple wrapper with all given arguments
        # workaround for DAMN $@ handling in bash when fwd them to su
        for i in "$@";do ARGS="$ARGS $i";done
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n... splunk arguments: $ARGS\n" && $SUBIN -c "$SPLBIN $ARGS" - $SPLUSR; else echo && "$SPLBIN" "$@";fi
        ;;
        splunkstop) # stop splunk>
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && $SUBIN -c "$SPLBIN stop" - $SPLUSR; else echo && "$SPLBIN" stop;fi
        ;;
        splunkstart) # start splunk>
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && $SUBIN -c "$SPLBIN start" - $SPLUSR; else echo && "$SPLBIN" start ;fi
        ;;
        splunkrestart) # restart splunk>
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && $SUBIN -c "$SPLBIN restart" - $SPLUSR; else echo && "$SPLBIN" restart;fi
        ;;
        splunkwebrestart) # restart splunk> web
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && $SUBIN -c "$SPLBIN restartss" - $SPLUSR; else echo && "$SPLBIN" restartss;fi
        ;;
        splunkdebug) # use splunk> btool debug
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && $SUBIN -c "$SPLBIN btool --debug check" - $SPLUSR; else echo && "$SPLBIN" btool --debug check;fi
        ;;
        splunkstatus) # splunk> status
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && $SUBIN -c "$SPLBIN status" - $SPLUSR; else echo && "$SPLBIN" status;fi
        ;;
        splunkshcdeploy|splunkshcapply) # splunk> SH cluster deploy configuration bundle
        if [ ! "$ID" == "$SPLUSR" ];then
            echo -e "... dropping privileges to user <$SPLUSR>"
            echo -e "... trying to get status and IPs of your SH cluster:" 
            $SUBIN -c "$SPLBIN list shcluster-members" - $SPLUSR |grep -Ei "(host_port_pair|status)" |cut -d":" -f2
        else
            $SPLBIN list shcluster-members |grep -Ei "(host_port_pair|status)" |cut -d":" -f2
        fi
        SERR=$?
        if [ $SERR -ne 0 ];then echo -e "\n\tWarning: cannot detect SH cluster info.\nYou need to find out an active cluster member manually.\nTo catch that automatically execute $BIN on a SH cluster member\n" ;fi
            
        if [ -z "$SHCMEMB" ];then
            while [ -z "$SHCMEMB" ];do
                echo -e "\nHint: SHCMEMB variable is not defined in $BIN\nIf you like you can predefine a cluster member but it is recommended to define it manually here.\n"
                read -p "Please specify 1 active SH cluster member (e.g.: '1.1.1.1' or 'my.fqdn.com') > " SHCMEMB
            done
        fi
        SHCURI="https://${SHCMEMB}:${SHCPORT}"
        if [ ! "$ID" == "$SPLUSR" ];then
            echo -e "\n... now dropping privileges to user <$SPLUSR>\n" && $SUBIN -c "$SPLBIN apply shcluster-bundle -target $SHCURI" - $SPLUSR
        else
            echo
            "$SPLBIN" apply shcluster-bundle -target "$SHCURI"
        fi
        ;;
        splunkcmdeploy|splunkcmapply) # splunk> Index cluster deploy configuration bundle
        # check if we're runnin on a CM first!
        F_CHECKCM
        if [ ! "$ID" == "$SPLUSR" ];then
            echo -e "... dropping privileges to user <$SPLUSR>\n"
            $SUBIN -c "$SPLBIN apply cluster-bundle" - $SPLUSR
        else
            echo
            "$SPLBIN" list master-info > /dev/null
            "$SPLBIN" apply cluster-bundle
        fi
        splunkclustershowbundle
        ;;
        splunkclustershow) # shows the cluster bundle status
        # check if we're runnin on a CM first!
        F_CHECKCM
        if [ ! "$ID" == "$SPLUSR" ];then
            echo -e "... dropping privileges to user <$SPLUSR>\n"
            $SUBIN -c "$SPLBIN show cluster-status" - $SPLUSR
        else
            echo
            "$SPLBIN" show cluster-status
        fi        
        ;;
        splunkclustershowbundle) # shows the cluster bundle status
        # check if we're runnin on a CM first!
        F_CHECKCM
        if [ ! "$ID" == "$SPLUSR" ];then
            echo -e "... dropping privileges to user <$SPLUSR>\n"
            $SUBIN -c "$SPLBIN show cluster-bundle-status" - $SPLUSR
        else
            echo
            "$SPLBIN" show cluster-bundle-status
        fi        
        ;;
        splunkclusterlistpeers) # shows the cluster peers status
        # check if we're runnin on a CM first!
        F_CHECKCM
        if [ ! "$ID" == "$SPLUSR" ];then
            echo -e "... dropping privileges to user <$SPLUSR>\n"
            $SUBIN -c "$SPLBIN list cluster-peers" - $SPLUSR
        else
            echo
            "$SPLBIN" show list cluster-peers
        fi        
        ;;
        splunkdsreload) # reload DS classes
        # check if we're runnin on a DS first!
        F_CHECKDS
        if [ ! "$ID" == "$SPLUSR" ];then
            echo -e "... dropping privileges to user <$SPLUSR>\n"
            $SUBIN -c "$SPLBIN reload deploy-server" - $SPLUSR
        else
            echo
            "$SPLBIN" reload deploy-server
        fi        
        ;;
        splunkexchange) # starts a simple python webserver for file exchange
        if [ -z "$1" ];then HPORT=8888; else HPORT="$1"; fi
        python -m SimpleHTTPServer $HPORT
        ;;
        *) # catch the rest
        F_HELP
        ;;
esac
