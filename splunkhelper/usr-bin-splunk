#!/bin/bash
#########################################################################################
#
# Author:	Thomas Fischer <mail@se-di.de>, https://github.com/xdajog
# Created: 	2015-08-13
# License: 	CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0/)
#
# Desc:   
#   Have you ever started splunk> as the wrong user? Oh well if you HAVE you know what I
#   mean. This helper here exists to avoid those forever! 
#     - Never worry about doing splunk> related commands with the correct user!
#     - No need to switch from user <root> to your splunk user 
#   just configure this helper with the installation path and splunk username and after
#   doing the symlinks you are done. 
#
#########################################################################################
#
# Usage & Installation: Checkout README !!
#
#########################################################################################
#
# Last changed: 2015-08-19
#
#########################################################################################

# user vars:
SPLUSR="splunk"			# the user splunk should run as
SPLDIR="/opt/splunk"		# splunk installation path


# generated vars:
SPLBIN="$SPLDIR/bin/splunk"	# the generated full path to splunk binary
ID=$(id -un) 			# get the effective - not real user name

# ensure we have root perms. we will drop privs when needed later.
if [ "$ID" != "root" ]&&[ "$ID" != "$SPLUSR" ];then
        echo -e "\n\tYou ($ID) need to be user <root> or <$SPLUSR> to execute this command.\n"
        exit 3
fi

# see how we get called:
BIN=${0##*/}
echo -e "\n... execution command was <$BIN>\n... executed as user <$ID>"

# and act accordingly:
case $BIN in
	# just a site note: I check for the splunk user and not for root here. Why?
	# well if something goes wrong it will fallback always to use su and therefore
	# the worst could happen would be that su failing because of permission.
	# this way I ensure that even when the user id was not catched correctly that 
	# this will not destroy the splunk> dirs..!
        splunk) # a simple wrapper with all given arguments
        # workaround for DAMN $@ handling in bash when fwd them to su
        for i in "$@";do ARGS="$ARGS $i";done
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n... splunk arguments: $ARGS" && su -c "$SPLBIN $ARGS" - $SPLUSR; else "$SPLBIN" "$@";fi
        ;;
        splunkstop) # stop splunk>
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && su -c "$SPLBIN stop" - $SPLUSR; else "$SPLBIN" stop;fi
        ;;
        splunkstart) # start splunk>
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && su -c "$SPLBIN start" - $SPLUSR; else "$SPLBIN" start ;fi
        ;;
        splunkrestart) # restart splunk>
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && su -c "$SPLBIN restart" - $SPLUSR; else "$SPLBIN" restart;fi
        ;;
        splunkwebrestart) # restart splunk> web
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && su -c "$SPLBIN restartss" - $SPLUSR; else "$SPLBIN" restartss;fi
        ;;
        splunkdebug) # use splunk> btool debug
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && su -c "$SPLBIN btool --debug check" - $SPLUSR; else "$SPLBIN" btool --debug check;fi
        ;;
        splunkstatus) # splunk> status
		if [ ! "$ID" == "$SPLUSR" ];then echo -e "... dropping privileges to user <$SPLUSR>\n" && su -c "$SPLBIN status" - $SPLUSR; else "$SPLBIN" status;fi
        ;;
esac
